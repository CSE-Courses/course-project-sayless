# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestprofile():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testprofile(self):
    # Test name: test_profile
    # Step # | name | target | value
    # 1 | open | /login | 
    self.driver.get("http://sayless.azurewebsites.net/login")
    # 2 | setWindowSize | 1552x840 | 
    self.driver.set_window_size(1552, 840)
    # 3 | click | id=emailInput | 
    self.driver.find_element(By.ID, "emailInput").click()
    # 4 | type | id=emailInput | jshrishty18@gmail.com
    self.driver.find_element(By.ID, "emailInput").send_keys("jshrishty18@gmail.com")
    # 5 | click | css=.row > .col | 
    self.driver.find_element(By.CSS_SELECTOR, ".row > .col").click()
    # 6 | click | id=passwordInput | 
    self.driver.find_element(By.ID, "passwordInput").click()
    # 7 | type | id=passwordInput | Okok123$$
    self.driver.find_element(By.ID, "passwordInput").send_keys("Okok123$$")
    # 8 | click | css=.btn1 | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn1").click()
    # 9 | click | css=.fas | 
    self.driver.find_element(By.CSS_SELECTOR, ".fas").click()
    # 10 | assertEditable | id=fn | 
    element = self.driver.find_element(By.ID, "fn")
    assert element.is_enabled() is True
    # 11 | type | id=fn | Shrishtyy
    self.driver.find_element(By.ID, "fn").send_keys("Shrishtyy")
    # 12 | click | id=ln | 
    self.driver.find_element(By.ID, "ln").click()
    # 13 | assertEditable | id=ln | 
    element = self.driver.find_element(By.ID, "ln")
    assert element.is_enabled() is True
    # 14 | type | id=ln | Jha
    self.driver.find_element(By.ID, "ln").send_keys("Jha")
    # 15 | verifyText | id=age |  
    assert self.driver.find_element(By.ID, "age").text == " "
    # 16 | click | css=.row:nth-child(3) label | 
    self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(3) label").click()
    # 17 | verifyTitle | Profile | 
    assert self.driver.title == "Profile"
    # 18 | click | css=input:nth-child(3) | 
    self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(3)").click()
    # 19 | click | id=new-pw | 
    self.driver.find_element(By.ID, "new-pw").click()
    # 20 | assertEditable | id=new-pw | 
    element = self.driver.find_element(By.ID, "new-pw")
    assert element.is_enabled() is True
    # 21 | type | id=new-pw | newPassword
    self.driver.find_element(By.ID, "new-pw").send_keys("newPassword")
    # 22 | verifyText | css=.btn | Edit
    assert self.driver.find_element(By.CSS_SELECTOR, ".btn").text == "Edit"
    # 23 | click | id=username | 
    self.driver.find_element(By.ID, "username").click()
    # 24 | assertEditable | id=username | 
    element = self.driver.find_element(By.ID, "username")
    assert element.is_enabled() is True
    # 25 | type | id=username | shrishtyyy
    self.driver.find_element(By.ID, "username").send_keys("shrishtyyy")
    # 26 | click | id=bio | 
    self.driver.find_element(By.ID, "bio").click()
    # 27 | assertEditable | id=bio | 
    element = self.driver.find_element(By.ID, "bio")
    assert element.is_enabled() is True
    # 28 | type | id=bio | Hi this is my new bio
    self.driver.find_element(By.ID, "bio").send_keys("Hi this is my new bio")
    # 29 | verifyText | css=.btn1 | Update
    assert self.driver.find_element(By.CSS_SELECTOR, ".btn1").text == "Update"
    # 30 | close |  | 
    self.driver.close()
  
