# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestProfile():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_profile(self):
    # Test name: Profile
    # Step # | name | target | value
    # 1 | open | /login | 
    self.driver.get("http://sayless.azurewebsites.net/login")
    # 2 | setWindowSize | 1552x840 | 
    self.driver.set_window_size(1552, 840)
    # 3 | click | id=emailInput | 
    self.driver.find_element(By.ID, "emailInput").click()
    # 4 | type | id=emailInput | jshrishty18@gmail.com
    self.driver.find_element(By.ID, "emailInput").send_keys("jshrishty18@gmail.com")
    # 5 | click | id=passwordInput | 
    self.driver.find_element(By.ID, "passwordInput").click()
    # 6 | type | id=passwordInput | Newpassword123
    self.driver.find_element(By.ID, "passwordInput").send_keys("Newpassword123")
    # 7 | click | css=.btn1 | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn1").click()
    # 8 | click | css=.fa-cog | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa-cog").click()
    # 9 | click | id=fn | 
    self.driver.find_element(By.ID, "fn").click()
    # 10 | assertEditable | id=fn | 
    element = self.driver.find_element(By.ID, "fn")
    assert element.is_enabled() is True
    # 11 | type | id=fn | Shrishtyy
    self.driver.find_element(By.ID, "fn").send_keys("Shrishtyy")
    # 12 | assertEditable | id=ln | 
    element = self.driver.find_element(By.ID, "ln")
    assert element.is_enabled() is True
    # 13 | click | id=ln | 
    self.driver.find_element(By.ID, "ln").click()
    # 14 | type | id=ln | Jha
    self.driver.find_element(By.ID, "ln").send_keys("Jha")
    # 15 | click | id=username | 
    self.driver.find_element(By.ID, "username").click()
    # 16 | assertEditable | id=username | 
    element = self.driver.find_element(By.ID, "username")
    assert element.is_enabled() is True
    # 17 | type | id=username | shrishtyy
    self.driver.find_element(By.ID, "username").send_keys("shrishtyy")
    # 18 | assertEditable | id=bio | 
    element = self.driver.find_element(By.ID, "bio")
    assert element.is_enabled() is True
    # 19 | click | id=new-pw | 
    self.driver.find_element(By.ID, "new-pw").click()
    # 20 | assertEditable | id=new-pw | 
    element = self.driver.find_element(By.ID, "new-pw")
    assert element.is_enabled() is True
    # 21 | click | id=new-pw | 
    self.driver.find_element(By.ID, "new-pw").click()
    # 22 | click | css=.left | 
    self.driver.find_element(By.CSS_SELECTOR, ".left").click()
    # 23 | verifyElementPresent | id=update | 
    elements = self.driver.find_elements(By.ID, "update")
    assert len(elements) > 0
    # 24 | click | id=update | 
    self.driver.find_element(By.ID, "update").click()
    # 25 | click | linkText=Edit | 
    self.driver.find_element(By.LINK_TEXT, "Edit").click()
    # 26 | click | css=.fas | 
    self.driver.find_element(By.CSS_SELECTOR, ".fas").click()
    # 27 | click | css=.fas | 
    self.driver.find_element(By.CSS_SELECTOR, ".fas").click()
  
