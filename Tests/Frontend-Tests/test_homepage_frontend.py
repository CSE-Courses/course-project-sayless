# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestHomepage():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_homepage(self):
    # Test name: homepage
    # Step # | name | target | value | comment
    # 1 | open | /login |  | 
    self.driver.get("http://sayless.azurewebsites.net/login")
    # 2 | setWindowSize | 1552x840 |  | 
    self.driver.set_window_size(1552, 840)
    # 3 | click | id=emailInput |  | 
    self.driver.find_element(By.ID, "emailInput").click()
    # 4 | type | id=emailInput | test@gmail.com | 
    self.driver.find_element(By.ID, "emailInput").send_keys("test@gmail.com")
    # 5 | type | id=passwordInput | password123 | 
    self.driver.find_element(By.ID, "passwordInput").send_keys("password123")
    # 6 | click | css=.submit |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".submit").click()
    WebDriverWait(self.driver, 30000).until(expected_conditions.presence_of_element_located((By.ID, "openchat")))
    # 7 | verifyText | css=a > h1 | SayLess | 
    assert self.driver.find_element(By.CSS_SELECTOR, "a > h1").text == "SayLess"
    # 8 | verifyText | id=startachat | Start a Chat | 
    assert self.driver.find_element(By.ID, "startachat").text == "Start a Chat"
    # 9 | selectFrame | index=1 |  | 
    self.driver.switch_to.frame(1)
    # 10 | verifyText | id=note_username | test | 
    assert self.driver.find_element(By.ID, "note_username").text == "test"
    # 11 | verifyElementPresent | css=.avatar |  | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".avatar")
    assert len(elements) > 0
    # 12 | verifyText | css=label | Bio: | 
    assert self.driver.find_element(By.CSS_SELECTOR, "label").text == "Bio:"
    # 13 | verifyText | id=bio_text | None | 
    assert self.driver.find_element(By.ID, "bio_text").text == "None"
    # 14 | selectFrame | relative=parent |  | 
    self.driver.switch_to.default_content()
    # 15 | verifyText | id=45605af62c5c1a6ab3a3001757a610e218153f3ec3385bbbd613d995bee90966 | test2 | 
    assert self.driver.find_element(By.ID, "45605af62c5c1a6ab3a3001757a610e218153f3ec3385bbbd613d995bee90966").text == "test2"
    # 16 | verifyText | id=openchat | Open Chats | 
    assert self.driver.find_element(By.ID, "openchat").text == "Open Chats"
    # 17 | verifyText | id=suggestedchat | Suggested Users | 
    assert self.driver.find_element(By.ID, "suggestedchat").text == "Suggested Users"
    # 18 | click | id=45605af62c5c1a6ab3a3001757a610e218153f3ec3385bbbd613d995bee90966 |  | 
    self.driver.find_element(By.ID, "45605af62c5c1a6ab3a3001757a610e218153f3ec3385bbbd613d995bee90966").click()
    # 19 | selectFrame | index=0 |  | 
    self.driver.switch_to.frame(0)
    # 20 | click | css=button:nth-child(1) |  | 
    self.driver.find_element(By.CSS_SELECTOR, "button:nth-child(1)").click()
    # 21 | selectFrame | relative=parent |  | 
    self.driver.switch_to.default_content()
    # 22 | selectFrame | index=1 |  | 
    self.driver.switch_to.frame(1)
    # 23 | verifyText | id=note_username | test2 | 
    assert self.driver.find_element(By.ID, "note_username").text == "test2"
    # 24 | verifyElementPresent | css=.avatar |  | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".avatar")
    assert len(elements) > 0
    # 25 | selectFrame | relative=parent |  | 
    self.driver.switch_to.default_content()
    # 26 | selectFrame | index=0 |  | 
    self.driver.switch_to.frame(0)
    # 27 | verifyText | css=button:nth-child(1) | test2 | 
    assert self.driver.find_element(By.CSS_SELECTOR, "button:nth-child(1)").text == "test2"
    # 28 | selectFrame | relative=parent |  | 
    self.driver.switch_to.default_content()
    # 29 | click | css=.fa-home |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa-home").click()
    # 30 | mouseOver | css=a > h1 |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "a > h1")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 31 | mouseOut | css=a > h1 |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    # 32 | click | css=.fa-cog |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa-cog").click()
    # 33 | click | css=.fas |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".fas").click()
    # 34 | close |  |  | 
    self.driver.close()
  
